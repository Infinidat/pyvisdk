
from pyvisdk.mo.consts import ManagedEntityTypes
from pyvisdk.mo.base_entity import BaseEntity
import logging

########################################
# Automatically generated, do not edit.
########################################

log = logging.getLogger(__name__)

class IpPoolManager(BaseEntity):
    '''Singleton Managed Object used to manage IP Pools.
    '''
    def __init__(self, core, name=None, ref=None, type=ManagedEntityTypes.IpPoolManager):
        # MUST define these
        super(IpPoolManager, self).__init__(core, name=name, ref=ref, type=type)
    
    

    def UpdateIpPool(self, pool):
        '''Update an IP pool on a datacenter.The pool to update is looked up from the value
        of the id field.All fields in the pool except the id are optional. Only
        defined values are stored on the server.

        :param pool: The IP pool to update on the server

        '''
        
        return self.delegate("UpdateIpPool")(pool)
        

    def QueryIpPools(self):
        '''Return the list of IP pools for a datacenter.

        :rtype: IpPool[] 

        '''
        
        return self.delegate("QueryIpPools")()
        

    def CreateIpPool(self, pool):
        '''Create a new IP pool.The name field must be defined, all other fields are
        optional. If unset, they will be given default values.The ID for the pool
        is generated by the server and should not be defined on the pool object
        passed to this method.

        :param pool: The IP pool to create on the server


        :rtype: xsd:int 

        '''
        
        return self.delegate("CreateIpPool")(pool)
        

    def DestroyIpPool(self, force, id):
        '''Destroys an IP pool on the given datacenter.Looks up the pool on the datacenter by
        ID and deletes it. If the pool is in use, the method throws InvalidState
        unless the force flag is true.

        :param force: If true, the pool will be destroyed even if it is in use

        :param id: The unique ID of the pool

        '''
        
        return self.delegate("DestroyIpPool")(force,id)
        
