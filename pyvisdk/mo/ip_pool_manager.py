
from pyvisdk.base.managed_object_types import ManagedObjectTypes

from pyvisdk.base.base_entity import BaseEntity

import logging

########################################
# Automatically generated, do not edit.
########################################

log = logging.getLogger(__name__)

class IpPoolManager(BaseEntity):
    '''Singleton Managed Object used to manage IP Pools.IP Pools are used to allocate
    IPv4 and IPv6 addresses to vApps.'''
    
    def __init__(self, core, name=None, ref=None, type=ManagedObjectTypes.IpPoolManager):
        super(IpPoolManager, self).__init__(core, name=name, ref=ref, type=type)
    
    
    
    
    
    def CreateIpPool(self):
        '''Create a new IP pool.The name field must be defined, all other fields are
        optional. If unset, they will be given default values.The ID for the pool is
        generated by the server and should not be defined on the pool object passed to
        this method.
        :rtype: 
        :returns: 
        '''
        return self.delegate("CreateIpPool")()
    
    def DestroyIpPool(self):
        '''Destroys an IP pool on the given datacenter.Looks up the pool on the datacenter
        by ID and deletes it. If the pool is in use, the method throws InvalidState
        unless the force flag is true.
        :rtype: None
        :returns: 
        '''
        return self.delegate("DestroyIpPool")()
    
    def QueryIpPools(self):
        '''Return the list of IP pools for a datacenter.
        :rtype: 
        :returns: 
        '''
        return self.delegate("QueryIpPools")()
    
    def UpdateIpPool(self):
        '''Update an IP pool on a datacenter.The pool to update is looked up from the
        value of the id field.All fields in the pool except the id are optional. Only
        defined values are stored on the server.
        :rtype: None
        :returns: 
        '''
        return self.delegate("UpdateIpPool")()